// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=service
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "job-port-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// ApplicantsFilter implements UserService.
func (*MockUserService) ApplicantsFilter(ctx context.Context, applicantList []models.ApplicantsRequest) ([]models.ApplicantsResponse, error) {
	panic("unimplemented")
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddCompany mocks base method.
func (m *MockUserService) AddCompany(ctx context.Context, companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompany", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCompany indicates an expected call of AddCompany.
func (mr *MockUserServiceMockRecorder) AddCompany(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompany", reflect.TypeOf((*MockUserService)(nil).AddCompany), ctx, companyData)
}

// AddJob mocks base method.
func (m *MockUserService) AddJob(ctx context.Context, jobData models.NewJob, cid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", ctx, jobData, cid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJob indicates an expected call of AddJob.
func (mr *MockUserServiceMockRecorder) AddJob(ctx, jobData, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockUserService)(nil).AddJob), ctx, jobData, cid)
}

// FetchAllCompanies mocks base method.
func (m *MockUserService) FetchAllCompanies() ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllCompanies")
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllCompanies indicates an expected call of FetchAllCompanies.
func (mr *MockUserServiceMockRecorder) FetchAllCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllCompanies", reflect.TypeOf((*MockUserService)(nil).FetchAllCompanies))
}

// FetchCompByid mocks base method.
func (m *MockUserService) FetchCompByid(cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCompByid", cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCompByid indicates an expected call of FetchCompByid.
func (mr *MockUserServiceMockRecorder) FetchCompByid(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCompByid", reflect.TypeOf((*MockUserService)(nil).FetchCompByid), cid)
}

// FetchJobByCompId mocks base method.
func (m *MockUserService) FetchJobByCompId(ctx context.Context, cid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJobByCompId", ctx, cid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJobByCompId indicates an expected call of FetchJobByCompId.
func (mr *MockUserServiceMockRecorder) FetchJobByCompId(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJobByCompId", reflect.TypeOf((*MockUserService)(nil).FetchJobByCompId), ctx, cid)
}

// FetchJobDetails mocks base method.
func (m *MockUserService) FetchJobDetails(ctx context.Context, cid uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJobDetails", ctx, cid)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJobDetails indicates an expected call of FetchJobDetails.
func (mr *MockUserServiceMockRecorder) FetchJobDetails(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJobDetails", reflect.TypeOf((*MockUserService)(nil).FetchJobDetails), ctx, cid)
}

// FetchJobPosts mocks base method.
func (m *MockUserService) FetchJobPosts(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJobPosts", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJobPosts indicates an expected call of FetchJobPosts.
func (mr *MockUserServiceMockRecorder) FetchJobPosts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJobPosts", reflect.TypeOf((*MockUserService)(nil).FetchJobPosts), ctx)
}

// FilterApplication mocks base method.
func (m *MockUserService) FilterApplication(ctx context.Context, applicantList []models.ApplicantsRequest) ([]models.ApplicantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterApplication", ctx, applicantList)
	ret0, _ := ret[0].([]models.ApplicantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterApplication indicates an expected call of FilterApplication.
func (mr *MockUserServiceMockRecorder) FilterApplication(ctx, applicantList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterApplication", reflect.TypeOf((*MockUserService)(nil).FilterApplication), ctx, applicantList)
}

// UserLogin mocks base method.
func (m *MockUserService) UserLogin(ctx context.Context, userData models.UserLogin) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserServiceMockRecorder) UserLogin(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserService)(nil).UserLogin), ctx, userData)
}

// UserSignup mocks base method.
func (m *MockUserService) UserSignup(ctx context.Context, userData models.UserSignup) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserServiceMockRecorder) UserSignup(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserService)(nil).UserSignup), ctx, userData)
}
